AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Blog service powering Ready, Set, Cloud cross-posting and analytics

Parameters:
  Environment:
    Type: String
    AllowedValues: [ sandbox, stage, production ]
    Default: sandbox
  HashnodeBlogUrl:
    Type: String
    Default: https://allenheltondev.hashnode.dev

Metadata:
  esbuild-properties: &esbuild-properties
    Format: esm
    Minify: true
    OutExtension:
      - .js=.mjs
    Target: es2020
    Sourcemap: false
    EntryPoints:
      - index.mjs
    Banner:
      - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
    External:
      - '@aws-sdk/*'

Conditions:
  DeployProductionResources:
    !Equals [!Ref Environment, 'production']
  DeployStageResources:
    Fn::Not:
      - !Equals [!Ref Environment, 'production']

Globals:
  Function:
    Runtime: nodejs20.x
    CodeUri: functions
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 15
    MemorySize: 1024
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        SECRET_ID: "{{resolve:ssm:/readysetcloud/secrets}}"

Resources:
  BlogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  ParseBlogFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - parse-blog.mjs
    Properties:
      Handler: parse-blog.handler
      Policies:
        - AWSLambdaBasicExecutionRole

  ImportFromGithubFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - import-from-github.mjs
    Properties:
      Handler: import-from-github.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/rsc/*
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt BlogTable.Arn
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref CrossPostStateMachine
      Environment:
        Variables:
          TABLE_NAME: !Ref BlogTable
          STATE_MACHINE_ARN: !Ref CrossPostStateMachine
      Events:
        EventInvocation:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Create New Blog
              detail:
                source:
                  - github

  GetViewCountFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-view-count.mjs
    Properties:
      Handler: get-view-count.handler
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"

  CompareViewCountsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - compare-view-counts.mjs
    Properties:
      Handler: compare-view-counts.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"

  GetTopBlogsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-top-blogs.mjs
    Properties:
      Handler: get-top-blogs.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"

  GetBlogContentFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-blog-content.mjs
    Properties:
      Handler: get-blog-content.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"
      Environment:
        Variables:
          OWNER: '{{resolve:ssm:/readysetcloud/github-owner}}'
          REPO: '{{resolve:ssm:/readysetcloud/github-repo}}'

  GetPublisherStatusFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-publisher-status.mjs
    Properties:
      Handler: get-publisher-status.handler

  GetPublisherOutputFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-publisher-output.mjs
    Properties:
      Handler: get-publisher-output.handler

  GetCrosspostDatesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-crosspost-dates.mjs
    Properties:
      Handler: get-crosspost-dates.handler

  CrossPostStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/cross-post.asl.json
      DefinitionSubstitutions:
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        DynamoDbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DynamoDbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        TableName: !Ref BlogTable
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetCrosspostDates: !GetAtt GetCrosspostDatesFunction.Arn
        GetBlogContent: !GetAtt GetBlogContentFunction.Arn
        StepFunctionsStartExecution: !Sub arn:${AWS::Partition}:states:::states:startExecution
        PublishStateMachine: !Ref PublishStateMachine
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt BlogTable.Arn
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt GetCrosspostDatesFunction.Arn
                - !GetAtt GetBlogContentFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref PublishStateMachine

  BlogViewCountStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/blog-view-count.asl.json
      DefinitionSubstitutions:
        TableName: !Ref BlogTable
        DynamoDbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetViewCount: !GetAtt GetViewCountFunction.Arn
        CompareViewCounts: !GetAtt CompareViewCountsFunction.Arn
        GetTopBlogs: !GetAtt GetTopBlogsFunction.Arn
        DynamodbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        AdminEmail: '{{resolve:ssm:/readysetcloud/admin-email}}'
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
              Resource: !GetAtt BlogTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !Sub ${BlogTable.Arn}/index/GSI1
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt GetViewCountFunction.Arn
                - !GetAtt CompareViewCountsFunction.Arn
                - !GetAtt GetTopBlogsFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(0 11 ? * MON *)"

  PublishStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/publish.asl.json
      DefinitionSubstitutions:
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        DynamoDbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        DynamoDbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        TableName: !Ref BlogTable
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetPublisherStatus: !GetAtt GetPublisherStatusFunction.Arn
        GetBlogContent: !GetAtt GetBlogContentFunction.Arn
        ParseBlog: !GetAtt ParseBlogFunction.Arn
        SendApiRequest: "{{resolve:ssm:/readysetcloud/send-api-request}}"
        GetPublisherOutput: !GetAtt GetPublisherOutputFunction.Arn
        AdminEmail: '{{resolve:ssm:/readysetcloud/admin-email}}'
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        ExecutionUrl: !Sub https://${AWS::Region}.console.${AWS::Partition}.amazon.com/states/home?region=${AWS::Region}#/v2/executions/details
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt BlogTable.Arn
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${BlogTable.Arn}/index/GSI1
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt GetPublisherStatusFunction.Arn
                - !GetAtt GetBlogContentFunction.Arn
                - !GetAtt ParseBlogFunction.Arn
                - "{{resolve:ssm:/readysetcloud/send-api-request}}"
                - !GetAtt GetPublisherOutputFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

