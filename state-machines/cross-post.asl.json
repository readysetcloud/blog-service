{
  "Comment": "Publish and cross-post a blog on dev.to, medium, and hashnode",
  "StartAt": "Get Idempotency Record",
  "States": {
    "Get Idempotency Record": {
      "Type": "Task",
      "Resource": "${DynamoDbGetItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.detail.key"
          },
          "sk": {
            "S": "blog"
          }
        }
      },
      "Next": "Has Been Processed?",
      "ResultPath": "$.record"
    },
    "Has Been Processed?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.record.Item",
            "IsPresent": true
          },
          "Next": "Set Record To In Progress"
        },
        {
          "And": [
            {
              "Variable": "$.record.Item",
              "IsPresent": true
            },
            {
              "Variable": "$.record.Item.status.S",
              "StringEquals": "failed"
            }
          ],
          "Next": "Set Record To In Progress"
        }
      ],
      "Default": "Success - Duplicate Request"
    },
    "Set Record To In Progress": {
      "Type": "Task",
      "Resource": "${DynamoDbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.detail.key"
          },
          "sk": {
            "S": "blog"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "in progress"
          }
        }
      },
      "Next": "Is Scheduled In The Future?",
      "ResultPath": null
    },
    "Is Scheduled In The Future?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.detail.futureDate",
          "IsPresent": true,
          "Next": "Wait For Future Date"
        }
      ],
      "Default": "Generate Crosspost Dates"
    },
    "Wait For Future Date": {
      "Type": "Wait",
      "TimestampPath": "$.detail.futureDate",
      "Next": "Trigger Site Rebuild"
    },
    "Trigger Site Rebuild": {
      "Type": "Task",
      "Resource": "${EventBridgePutEvents}",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "reason": "Scheduled blog"
            },
            "DetailType": "Trigger Site Rebuild",
            "Source": "user.CrossPostStateMachine"
          }
        ]
      },
      "Next": "Generate Crosspost Dates"
    },
    "Generate Crosspost Dates": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "ResultSelector": {
        "content.$": "$.Payload.content"
      },
      "Parameters": {
        "FunctionName": "${GetCrosspostDates}",
        "Payload": {
          "fileName.$": "$$.Execution.Input.detail.fileName"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Save Catalog Entry",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Update Record - Failure"
        }
      ],
      "OutputPath": "$.Payload"
    },
    "Save Catalog Entry": {
      "Type": "Task",
      "Resource": "${DynamoDbPutItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Item": {
          "pk": {
            "S.$": "$$.Execution.Input.detail.url"
          },
          "sk": {
            "S": "blog"
          },
          "GSI1PK": {
            "S.$": "States.Format('blog#{}', $$.Execution.Input.detail.author)"
          },
          "GSI1SK": {
            "S.$": "$$.Execution.Input.detail.fileName"
          }
        }
      },
      "ResultPath": null,
      "Next": "Schedule Crossposts"
    },
    "Update Record - Failure": {
      "Type": "Task",
      "Resource": "${DynamoDbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.detail.key"
          },
          "sk": {
            "S": "blog"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "failed"
          }
        }
      },
      "End": true,
      "ResultPath": null
    },
    "Schedule Crossposts": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Wait For Dev Crosspost Date",
          "States": {
            "Wait For Dev Crosspost Date": {
              "Type": "Wait",
              "Next": "Publish to Dev.to",
              "TimestampPath": "$.dev"
            },
            "Publish to Dev.to": {
              "Type": "Task",
              "Resource": "${StepFunctionsStartExecution}",
              "Parameters": {
                "StateMachineArn": "${PublishStateMachine}",
                "Input": {
                  "key.$": "$$.Execution.Input.detail.key)",
                  "fileName.$": "$$.Execution.Input.detail.fileName",
                  "url.$": "$$.Execution.Input.detail.url",
                  "publisher": "dev",
                  "auth": {
                    "location": "header",
                    "key": "api-key"
                  },
                  "request": {
                    "method": "POST",
                    "headers": {
                      "accept": "application/vnd.forem.api-v1+json"
                    },
                    "baseUrl": "https://dev.to/api/articles"
                  },
                  "output": {
                    "url": {
                      "format": "path",
                      "path": "$.result.Payload.id"
                    },
                    "id": {
                      "format": "composed",
                      "path": "$.result.Payload.id",
                      "template": "{}"
                    }
                  },
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Wait For Medium Crosspost Date",
          "States": {
            "Wait For Medium Crosspost Date": {
              "Type": "Wait",
              "Next": "Publish to Medium",
              "TimestampPath": "$.medium"
            },
            "Publish to Medium": {
              "Type": "Task",
              "Resource": "${StepFunctionsStartExecution}",
              "Parameters": {
                "StateMachineArn": "${PublishStateMachine}",
                "Input": {
                  "key.$": "$$.Execution.Input.detail.key",
                  "fileName.$": "$$.Execution.Input.detail.fileName",
                  "url.$": "$$.Execution.Input.detail.url",
                  "publisher": "medium",
                  "auth": {
                    "location": "query",
                    "key": "accessToken"
                  },
                  "request": {
                    "method": "POST",
                    "baseUrl": "https://api.medium.com/v1/publications/5517fd7b58a6/posts",
                    "headers": {}
                  },
                  "output": {
                    "url": {
                      "format": "path",
                      "path": "$.result.Payload.data.url"
                    },
                    "id": {
                      "format": "path",
                      "path": "$.result.Payload.data.id"
                    }
                  },
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Wait For Hashnode Crosspost Date",
          "States": {
            "Wait For Hashnode Crosspost Date": {
              "Type": "Wait",
              "Next": "Publish to Hashnode",
              "TimestampPath": "$.hashnode"
            },
            "Publish to Hashnode": {
              "Type": "Task",
              "Resource": "${StepFunctionsStartExecution}",
              "Parameters": {
                "StateMachineArn": "${PublishStateMachine}",
                "Input": {
                  "key.$": "$$.Execution.Input.detail.key",
                  "fileName.$": "$$.Execution.Input.detail.fileName",
                  "url.$": "$$.Execution.Input.detail.url",
                  "publisher": "hashnode",
                  "auth": {
                    "location": "header",
                    "key": "Authorization"
                  },
                  "request": {
                    "method": "POST",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "baseUrl": "https://gql.hashnode.com"
                  },
                  "output": {
                    "url": {
                      "format": "composed",
                      "path": "$.result.Payload.data.publishPost.post.slug",
                      "template": "https://allenheltondev.hashnode.dev/{}"
                    },
                    "id": {
                      "format": "path",
                      "path": "$.result.Payload.data.publishPost.post.slug"
                    }
                  },
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                }
              },
              "End": true
            }
          }
        }
      ],
      "Next": "Update Record - Success",
      "ResultPath": "$.transform"
    },
    "Update Record - Success": {
      "Type": "Task",
      "Resource": "${DynamoDbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.detail.key"
          },
          "sk": {
            "S": "blog"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "succeeded"
          }
        }
      },
      "ResultPath": null,
      "End": true
    },
    "Success - Duplicate Request": {
      "Type": "Succeed",
      "Comment": "This blog has already been processed"
    }
  }
}
